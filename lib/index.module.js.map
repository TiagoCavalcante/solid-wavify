{"mappings":"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","sources":["src/index.tsx","src/wave.tsx"],"sourcesContent":["import WaveBase from \"./wave\";\nimport type { BaseWaveProps, WaveHTMLProps } from \"./wave\";\n\nconst defaults = {\n  height: 20,\n  amplitude: 20,\n  speed: 0.15,\n  points: 3,\n};\n\nexport type WaveProps = WaveHTMLProps\n  & Pick<BaseWaveProps, \"fill\" | \"paused\">\n  & { options: Partial<Omit<BaseWaveProps, \"fill\" | \"paused\">>; };\n\nexport default function Wave(props: WaveProps) {\n  return (\n    <WaveBase\n      {...defaults}\n      {...props.options}\n      {...props}\n    />\n  );\n}\n","import {\n  createSignal,\n  mergeProps,\n  onCleanup,\n  onMount,\n  splitProps\n} from \"solid-js\";\nimport type { JSX, ParentProps } from \"solid-js\";\n\ntype Fn<T> = (el: T) => void;\n\nfunction isFunction<T>(obj: T | Fn<T>): obj is Fn<T> {\n  return typeof obj === \"function\";\n};\n\nexport type Point = {\n  x: number,\n  y: number,\n};\n\nexport type BaseWaveProps = {\n  style: JSX.CSSProperties,\n  class: string,\n  fill: JSX.IntrinsicElements[\"path\"][\"fill\"],\n  paused: Boolean,\n  id: string,\n  ref: Fn<HTMLDivElement> | HTMLDivElement | null,\n  height: number,\n  amplitude: number,\n  speed: number,\n  points: number,\n};\n\nexport type WaveHTMLProps = Omit<\n  JSX.IntrinsicElements[\"path\"],\n  keyof BaseWaveProps | \"children\"\n>;\n\nexport type WaveProps = Partial<BaseWaveProps & WaveHTMLProps>;\n\nexport default function Wave(baseProps: ParentProps<WaveProps>) {\n  const props = mergeProps({\n    amplitude: 20,\n    height: 20,\n    points: 3,\n    speed: 0.15,\n  }, baseProps);\n\n  const [local, rest] = splitProps(props, [\n    \"amplitude\",\n    \"height\",\n    \"points\",\n    \"speed\",\n\n    \"style\",\n    \"class\",\n    \"fill\",\n    \"paused\",\n    \"children\",\n    \"id\",\n    \"ref\",\n  ]);\n\n  const [path, setPath] = createSignal(\"\");\n\n  let ref: HTMLDivElement;\n  let lastUpdate = 0;\n  let elapsed = 0;\n  let step = 0;\n  let frameId = 0;\n\n  function calculateWavePoints() {\n    const pointList = [];\n    for (let i = 0; i <= Math.max(local.points, 1); i++) {\n      const scale = 100;\n      const x = i / local.points * getWidth();\n      const seed = (step + (i + i % local.points)) * local.speed * scale;\n      const currentHeight = Math.sin(seed / scale) * local.amplitude;\n      const y = Math.sin(seed / scale) * currentHeight + local.height;\n      pointList.push({ x, y });\n    }\n    return pointList;\n  }\n\n  function buildPath(points: Array<Point>) {\n    let svg = `M ${points[0].x} ${points[0].y}`;\n    const initial = {\n      x: (points[1].x - points[0].x) / 2,\n      y: (points[1].y - points[0].y) + points[0].y + (points[1].y - points[0].y)\n    };\n    const cubic = (a: Point, b: Point) => ` C ${a.x} ${a.y} ${a.x} ${a.y} ${b.x} ${b.y}`;\n    svg += cubic(initial, points[1]);\n    let point = initial;\n    for (let i = 1; i < points.length - 1; i++) {\n      point = {\n        x: (points[i].x - point.x) + points[i].x,\n        y: (points[i].y - point.y) + points[i].y\n      };\n      svg += cubic(point, points[i + 1]);\n    }\n    svg += ` L ${getWidth()} ${getHeight()}`;\n    svg += ` L 0 ${getHeight()} Z`;\n    return svg;\n  }\n\n  const getWidth = () => ref.offsetWidth;\n  const getHeight = () => ref.offsetHeight;\n\n  function redraw() {\n    setPath(buildPath(calculateWavePoints()));\n  }\n\n  function draw() {\n    if (!local.paused) {\n      const now = new Date().getTime();\n      elapsed += now - lastUpdate;\n      lastUpdate = now;\n    }\n    const scale = 1000;\n    step = elapsed * Math.PI / scale;\n    redraw();\n  }\n\n  function update() {\n    draw();\n\n    if (frameId) resume();\n  }\n\n  function resume() {\n    frameId = window.requestAnimationFrame(update);\n    lastUpdate = new Date().getTime();\n  }\n\n  onMount(() => {\n    if (!frameId) resume();\n  });\n\n  onCleanup(() => {\n    window.cancelAnimationFrame(frameId);\n    frameId = 0;\n  });\n\n  return (\n    <div\n      style={{ width: \"100%\", display: \"inline-block\", ...local.style }}\n      class={local.class}\n      id={local.id}\n      ref={(element) => {\n        if (local.ref) {\n          if (isFunction(local.ref)) {\n            local.ref(element);\n          } else {\n            local.ref = element;\n          }\n        }\n        ref = element;\n      }}\n    >\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        {local.children}\n        <path d={path()} fill={local.fill} {...rest} />\n      </svg>\n    </div>\n  );\n}\n"],"names":["WaveBase","BaseWaveProps","WaveHTMLProps","defaults","height","amplitude","speed","points","WaveProps","Pick","options","Partial","Omit","Wave","props","createSignal","mergeProps","onCleanup","onMount","splitProps","JSX","ParentProps","Fn","el","T","isFunction","obj","Point","x","y","style","CSSProperties","class","fill","IntrinsicElements","paused","Boolean","id","ref","HTMLDivElement","baseProps","local","rest","path","setPath","lastUpdate","elapsed","step","frameId","calculateWavePoints","pointList","i","Math","max","scale","getWidth","seed","currentHeight","sin","push","buildPath","Array","svg","initial","cubic","a","b","point","length","getHeight","offsetWidth","offsetHeight","redraw","draw","now","Date","getTime","PI","update","resume","window","requestAnimationFrame","cancelAnimationFrame","element","children","width","display"],"version":3,"file":"index.module.js.map"}